Types in TypeScript

  TypeScript mein types ka concept strong typing ko support karne ke liye aata hai. Yeh TypeScript ko JavaScript se alag banata hai, jahan aap variables, functions, ya objects ke liye specific types define kar sakte ho. Yeh compile-time par errors ko catch karne mein help karta hai.


1. Primitive Types

  - Primitive types simple aur basic types hote hain jo direct values ko represent karte hain.

   Common Primitive Types:

   let age: number = 25;
   let name: string = "John";
   let isStudent: boolean = true;
   let empty: null = null;
   let notAssigned: undefined = undefined;


2. Reference Types

  - Reference types complex structures ko represent karte hain, jaise objects, arrays, functions, etc.


///////////////////////////////////////////
///////////////////////////////////////////
Array in ts
///////////////////////////////////////////
///////////////////////////////////////////

A. Array Without Data Type

Agar aap TypeScript mein array create karte ho bina kisi specific data type ke, to TypeScript us array ko any[] type ka samajhta hai. Iska matlab hai ki aap us array mein koi bhi type ka data store kar sakte ho, lekin isse TypeScript ki strong typing ka benefit nahi milega.

let myArray = []; // TypeScript infers this as 'any[]'
myArray.push(10);
myArray.push("Hello");
myArray.push(true);



B. Mixed Array

Agar aap ek aisa array chahte ho jisme alag-alag types ke values ho sakti hain, to aap union types ka use kar sakte ho. Isse TypeScript ko pata chalega ki is array mein multiple types ke elements ho sakte hain.

let mixedArray: (number | string | boolean)[] = [];
mixedArray.push(10);
mixedArray.push("Hello");
mixedArray.push(true);



C. Define Array Type

TypeScript mein aap explicitly array ke type ko define kar sakte ho. Yeh aapko strongly-typed array banane mein help karta hai, jisme sirf specific type ke values hi allowed hoti hain.

Example 1: Number Array
let numbers: number[] = [1, 2, 3, 4, 5];

Example 2: String Array
let strings: string[] = ["apple", "banana", "cherry"];




///////////////////////////////////////////
///////////////////////////////////////////
Objects in ts
///////////////////////////////////////////
///////////////////////////////////////////

TypeScript mein objects ko strongly type kar sakte ho by defining the types of properties jo us object mein honi chahiye. Isse aapke code mein clarity aati hai aur errors detect karna easy ho jata hai.


1. Basic Object Type Definition

Agar aap ek simple object create kar rahe ho, to aapko us object ke properties ke types specify karne chahiye.

let person: { name: string; age: number } = {
    name: "John",
    age: 30,
};


2. Interface

Interface se hum object ki properties main unka type define kar sakte hai or isko multiple object main use bhi kar sakte hai.
Any ka use tab hota hai jab humne property ka data pata nahi hota iss condition main hum koi bhi data type assign kar sakte hai

interface usersTyped {
  name: string;
  // age: number;
  age: any;
  city: string;
}

let users1: usersTyped = {
  name: "sameer khan",
  age: 24,
  city: "pali",
};


///////////////////////////////////////
/// function

Function ek block of code hota hai jo koi specific task perform karta hai. TypeScript mein aap parameters aur return type bhi specify kar sakte ho.


function add(a: number, b: number): number {
    return a + b;
}



/////////////////////////////
Union Type


Union type TypeScript mein multiple types ko combine karne ke liye use hote hain.

Union Types (|):
Union types allow karte hain ki variable multiple types ka ho sakta hai.

let id: number | string;
id = 101;
id = "E101";