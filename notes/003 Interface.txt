1. What is an Interface?

Interface ek blueprint ki tarah hota hai jo specify karta hai ki kisi object, class, ya function ka structure kaisa hoga. Isme aap properties aur methods define karte ho jo implement hone chahiye.

interface Person {
    name: string;
    age: number;
    greet(): string;
}





2. Why Use Interface?

Interface use karne ke kuch important reasons yeh hain:

Consistency: Interface define karne se aap ensure kar sakte   ho ki different objects ya classes jo same structure follow karte hain, unmein consistency rahe.

Reusability: Interface ko multiple places par reuse kiya ja sakta hai, jisse aapko repeatedly same structure define nahi karna padta.

Code Readability: Interface se aapka code zyada readable aur maintainable hota hai, kyunki interfaces clearly define karte hain ki kya implement hona chahiye.

Type Checking: Interface se TypeScript compile-time par type checking karta hai, jisse errors ka chance kam ho jata hai.








3. How to Use Interface?

Interfaces ko kaise use kiya jata hai, yeh samajhne ke liye chaliye kuch examples dekhte hain:


Example 1: Using Interface with Objects

Aap interface ka use directly objects ke structure ko define karne ke liye kar sakte ho.

interface Person {
    name: string;
    age: number;
    greet(): string;
}

let person: Person = {
    name: "John",
    age: 30,
    greet() {
        return `Hello, my name is ${this.name}`;
    }
};



Example 2: Using Interface with Classes

Interfaces ko classes ke saath bhi use kiya ja sakta hai, jisse ensure hota hai ki class ke objects ka structure consistent ho.


interface Animal {
    name: string;
    makeSound(): void;
}

class Dog implements Animal {
    name: string;

    constructor(name: string) {
        this.name = name;
    }

    makeSound(): void {
        console.log("Woof! Woof!");
    }
}

let myDog = new Dog("Buddy");
myDog.makeSound(); // Output: Woof! Woof!



Example 3: Extending Interfaces

Aap ek interface ko doosre interface se extend kar sakte ho, jisse existing structure mein naye properties ya methods add kar sakte ho.

interface Person {
    name: string;
    age: number;
}

interface Employee extends Person {
    employeeId: number;
}

let employee: Employee = {
    name: "Alice",
    age: 28,
    employeeId: 101
};



Example 4: Optional and Readonly Properties in Interface

Interfaces mein aap optional properties (?) aur readonly properties bhi define kar sakte ho, jisse kuch properties ko optional ya immutable banaya ja sakta hai.


interface Car {
    readonly make: string;
    model: string;
    year?: number;
}

let myCar: Car = {
    make: "Toyota",
    model: "Corolla"
};